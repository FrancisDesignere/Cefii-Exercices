# ce fichier est exploitable sous www.websequencediagrams.com
# (c'est format propriétaire de définition d'un diagramme de séquence)

title Sequence MVC



participant Cateorymodel
participant connectModel
participant model
participant index
participant controller
participant view 
participant header\nhtml as header
participant nav
participant footer\nhtml as footer
participant CateoryView
participant frmCateory
participant accueil\nhtml as accueil


index<->controller: new Controller

controller<->view :new View
controller<->model :new Model
model<->connectModel: new singleConnection

opt affichage home
index->+controller :dispatch(home)
controller->+view: displayHmtl(home)
deactivate controller
view<->header:getContents()
view<->nav:getContents()
view<->accueil:getContents()
view<->-footer:getContents()
end

opt affichage list
index->+controller :dispatch(list)
controller->+model: GetList(table)
model <->connectModel:getInstance()
model->model: requete bdd
model-->-controller : list[]
controller->+view: displayList(list[])
deactivate controller
view<->header:getContents()
view<->nav:getContents()
loop boucle par élement
view<->view:ecrit chaque\n element
end
view<->-footer:getContents()
end

opt ajout item
index->+controller :dispatch(frm)\n sans item
controller->+CateoryView : displayAdd()
deactivate controller
CateoryView->+view : 
view<->header : getContents()
view<->nav : getContents()
view->CateoryView : 
CateoryView<->frmCateory : getContents()
CateoryView->CateoryView : vide valeur \n maj action
CateoryView->-view : displayForm
view<->-footer:getContents()
opt à la validation du formulaire rempli
index->+controller :dispatch(add)
controller->+Cateorymodel: Upsert
Cateorymodel->model:construt
model <->connectModel:getInstance()
model->Cateorymodel: connection
Cateorymodel->Cateorymodel: requete bdd
Cateorymodel-->-controller : 
controller->+view: displayList(list[])
deactivate controller
note right of view  : voir opt affichage list
deactivate view
end
end


opt mise à jour item
index->+controller :dispatch(frm) \n avec item
controller->+Cateorymodel: getItemById()
Cateorymodel->model:construt
model <->connectModel:getInstance()
model->Cateorymodel: connection
Cateorymodel->Cateorymodel: requete bdd
Cateorymodel-->-controller : item
controller->+CateoryView : displayUpdate(item)
deactivate controller
CateoryView->+view : 
view<->header : getContents()
view<->nav : getContents()
view->CateoryView : 
CateoryView<->frmCateory : getContents()
CateoryView->CateoryView : rempli valeur \n maj action
CateoryView->-view : displayForm
view<->-footer:getContents()
opt à la validation du formulaire modifié
index->+controller :dispatch(maj)
controller->+Cateorymodel: Upsert
Cateorymodel->model:construt
model <->connectModel:getInstance()
model->Cateorymodel: connection
Cateorymodel->Cateorymodel: requete bdd
Cateorymodel-->-controller : 
controller->+view: displayList(list[])
deactivate controller
note right of view  : voir opt affichage list
deactivate view
end
end

opt suppression item
index->+controller :dispatch(frmDel)
controller->+Cateorymodel: getItemById()
Cateorymodel->model:construt
model <->connectModel:getInstance()
model->Cateorymodel: connection
Cateorymodel->Cateorymodel: requete bdd
Cateorymodel-->-controller : item
controller->+CateoryView : displayDelete(item)
deactivate controller
CateoryView->+view : 
view<->header : getContents()
view<->nav : getContents()
view->CateoryView : 
CateoryView<->frmCateory : getContents()
CateoryView->CateoryView : lecture seule \n maj action
CateoryView->-view : displayForm
view<->-footer:getContents()
opt à la validation de la suppression
index->+controller :dispatch(del)
controller->+Cateorymodel: Upsert
Cateorymodel->model:construt
model <->connectModel:getInstance()
model->Cateorymodel: connection
Cateorymodel->Cateorymodel: requete bdd
Cateorymodel-->-controller : 
controller->+view: displayList(list[])
deactivate controller
note right of view  : voir opt affichage list
deactivate view
end
end
